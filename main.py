import telebot
from dotenv import load_dotenv, find_dotenv
import os
from g4f.client import Client
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup


load_dotenv(find_dotenv())
API_TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(API_TOKEN)

session = {}
# @bot.message_handler(commands=["start"])
# def send_welcome(message):
#     chatID = message.chat.id
#     session[chatID] = {}
#     bot.send_message(chatID, "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
#                              "/find_character")
#

@bot.message_handler(commands=["start"])
def ask(message):
    chatID = message.chat.id
    session[chatID]['message'] = message
    print(chatID)
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("–õ—É–±–æ–π –ü–µ—Ä—Å–æ–Ω–∞–∂ü§î", callback_data="character")
    button2 = InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º–∞üå†üéÜ", callback_data="disney")
    button3 = InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ò–≥—Ä—ãüëæüéÆ", callback_data="game")
    button4 = InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂ –§–∏–ª—å–º–∞üåáüé•", callback_data="film")
    button5 = InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –°–µ—Ä–∏–∞–ª–∞üåÉüé¨", callback_data="serial")
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)
    markup.add(button5)
    bot.send_message(chatID, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ —Å–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
                             "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–∞–∫–æ–≥–æ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ü•≥üëá", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback:True)
def handle_callback1(callback):
    chatID = callback.from_user.id
    button_call = callback.data
    if button_call == "character":
        bot.send_message(chatID, "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")
        # bot.register_next_step_handler(session[chatID]['message'], generate_character)
    elif button_call == "disney":
        bot.send_message(chatID, "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")
    elif button_call == "game":
        bot.send_message(chatID, "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")
    elif button_call == "film":
        bot.send_message(chatID, "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")
    elif button_call == "serial":
        bot.send_message(chatID, "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")

# @bot.message_handler(commands=["find_character"])
# def ask(message):
#
def generate_character(message):
    chatID = message.chat.id
    bot.send_message(chatID, "–ë–æ—Ç –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
    bot.send_message(chatID, info_wolfram(message, " –Ω–∞ –∫–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —è –ø–æ—Ö–æ–∂?"))


def info_wolfram(query):
    client = Client()
    response = client.chat.comption.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": query}]
    )
    return response.choices[0].message.content


bot.infinity_polling()